name: Documentation and Code Quality
on:
  push:
    branches: [ main, spectrum_fits ]
  pull_request:
    branches: [ main, spectrum_fits ]

permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  # Auto-format code on push
  auto-format:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.ref }}
      
      - name: Check if last commit was auto-format
        id: check-last-commit
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          if [[ "$LAST_COMMIT_MSG" == "Auto-format code with clang-format" ]]; then
            echo "Last commit was auto-format, skipping"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Last commit was not auto-format, proceeding"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Install clang-format
        if: steps.check-last-commit.outputs.skip == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format
      
      - name: Run clang-format
        if: steps.check-last-commit.outputs.skip == 'false'
        run: |
          find source -name "*.h" -o -name "*.cc" -o -name "*.cpp" -o -name "*.c" | xargs clang-format -i
      
      - name: Check for formatting changes
        if: steps.check-last-commit.outputs.skip == 'false'
        id: format-check
        run: |
          if git diff --quiet; then
            echo "No formatting changes needed"
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Formatting changes detected"
            echo "changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit formatting changes
        if: steps.check-last-commit.outputs.skip == 'false' && steps.format-check.outputs.changes == 'true'
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add -A
          git commit -m "Auto-format code with clang-format

          ðŸ¤– Generated with GitHub Actions
          
          Co-Authored-By: GitHub Actions <actions@github.com>" || exit 0
          git push

  # Format check for pull requests (validation only)
  format-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Run clang-format style check
        uses: jidicula/clang-format-action@v4.11.0
        with:
          clang-format-version: '15'
          check-path: 'source'

  # Build and deploy documentation
  build-docs:
    runs-on: ubuntu-latest
    needs: auto-format
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz clang-format
          pip install sphinx sphinx-rtd-theme breathe myst-parser
      
      - name: Configure git for documentation
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Build Doxygen documentation
        run: |
          cd docs
          doxygen Doxyfile
      
      - name: Build Sphinx documentation
        run: |
          cd docs
          sphinx-build -b html . _build/html
      
      - name: Add build timestamp and commit info
        run: |
          cd docs/_build/html
          echo "<p>Built on $(date) from commit <a href=\"https://github.com/${{ github.repository }}/commit/${{ github.sha }}\">${{ github.sha }}</a></p>" >> index.html
      
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation-html
          path: docs/_build/html
          retention-days: 30
      
      # Deploy to GitHub Pages on push to main
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html
          force_orphan: true
          user_name: 'GitHub Actions'
          user_email: 'actions@github.com'
          commit_message: 'Deploy documentation for commit ${{ github.sha }}'
      
      # Deploy to GitHub Pages on push to spectrum_fits branch (for development)
      - name: Deploy to GitHub Pages (dev)
        if: github.ref == 'refs/heads/spectrum_fits' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html
          destination_dir: dev
          force_orphan: false
          user_name: 'GitHub Actions'
          user_email: 'actions@github.com'
          commit_message: 'Deploy development documentation for commit ${{ github.sha }}'
